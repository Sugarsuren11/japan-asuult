let words = [];
let usedIndexes = new Set();
let score = 0;
let lang = "jp";
let attempts = 0;
const maxAttempts = 2;
let currentQuestion = null;
let timerTimeout;

const questionText = document.getElementById("questionText");
const optionsDiv = document.getElementById("options");
const scoreDisplay = document.getElementById("score");
const startMenu = document.getElementById("startMenu");
const gameArea = document.getElementById("gameArea");
const feedbackEl = document.getElementById("feedback");
const progressBar = document.getElementById("progressBar");

// HTML —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
if (!questionText || !optionsDiv || !scoreDisplay || !startMenu || !gameArea || !feedbackEl || !progressBar) {
  console.error("HTML —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π. ID-—É—É–¥—ã–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.");
}

// vocab.json —Ñ–∞–π–ª—ã–≥ –∞—á–∞–∞–ª–∞—Ö
async function loadVocab() {
  try {
    const res = await fetch("vocab.json");
    if (!res.ok) throw new Error("vocab.json —Ñ–∞–π–ª—ã–≥ –∞—á–∞–∞–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π.");
    words = await res.json();
    console.log("–ê—á–∞–∞–ª—Å–∞–Ω ”©–≥”©–≥–¥”©–ª:", words);
    if (!words.length) throw new Error("vocab.json —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.");
  } catch (error) {
    console.error("–ê–ª–¥–∞–∞:", error);
    alert("”®–≥”©–≥–¥”©–ª –∞—á–∞–∞–ª–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. vocab.json —Ñ–∞–π–ª—ã–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.");
  }
}

async function startGame(selectedLang) {
  await loadVocab();
  if (!words.length) return;

  lang = selectedLang;
  score = 0;
  attempts = 0;
  usedIndexes.clear();
  scoreDisplay.innerText = `–û–Ω–æ–æ: ${score}`;
  feedbackEl.innerText = "";
  startMenu.style.display = "none";
  gameArea.style.display = "block";
  newQuestion();
}

function startVisualTimer() {
  progressBar.style.animation = "none";
  void progressBar.offsetWidth;
  progressBar.style.animation = "shrink 60s linear forwards";

  clearTimeout(timerTimeout);
  timerTimeout = setTimeout(() => {
    showAnswer();
  }, 60000);
}

function getNeighborChoices(index, correctAnswer, isMongolian) {
  const choices = [correctAnswer];
  const availableNeighbors = [];

  // –î—ç—ç—Ä—Ö –±–æ–ª–æ–Ω –¥–æ–æ—Ä—Ö –∏–Ω–¥–µ–∫—Å“Ø“Ø–¥–∏–π–≥ –∞–≤–∞—Ö (—Ö—è–∑–≥–∞–∞—Ä—ã–≥ —à–∞–ª–≥–∞—Ö)
  const neighborIndexes = [
    index - 2, index - 1, index + 1, index + 2
  ].filter(i => i >= 0 && i < words.length && i !== index);

  // –•”©—Ä—à –∑—ç—Ä–≥—ç–ª–¥—ç—ç —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥–∏–π–≥ –∞–≤–∞—Ö
  neighborIndexes.forEach(i => {
    const value = isMongolian ? words[i].mongolian : words[i].kana;
    if (!choices.includes(value)) {
      availableNeighbors.push(value);
    }
  });

  // 3 –±—É—Ä—É—É —Å–æ–Ω–≥–æ–ª—Ç—ã–≥ —Å–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π–≥—ç—ç—Ä —Å–æ–Ω–≥–æ—Ö
  while (choices.length < 4 && availableNeighbors.length > 0) {
    const randomIndex = Math.floor(Math.random() * availableNeighbors.length);
    choices.push(availableNeighbors.splice(randomIndex, 1)[0]);
  }

  // –•—ç—Ä–≤—ç—ç —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π —Ö”©—Ä—à –±–∞–π—Ö–≥“Ø–π –±–æ–ª –±—É—Å–∞–¥ “Ø–≥–Ω“Ø“Ø–¥—ç—ç—Å –Ω”©—Ö–Ω”©
  while (choices.length < 4) {
    const randomIndex = Math.floor(Math.random() * words.length);
    const value = isMongolian ? words[randomIndex].mongolian : words[randomIndex].kana;
    if (!choices.includes(value)) {
      choices.push(value);
    }
  }

  // –°–æ–Ω–≥–æ–ª—Ç—É—É–¥—ã–≥ —Å–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π —Ö–æ–ª–∏–Ω–æ
  shuffle(choices);
  return choices;
}

function newQuestion() {
  if (!words.length) {
    questionText.innerText = "”®–≥”©–≥–¥”©–ª —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞!";
    optionsDiv.innerHTML = "";
    feedbackEl.innerText = "";
    return;
  }

  if (usedIndexes.size >= words.length) {
    questionText.innerText = "–¢–æ–≥–ª–æ–æ–º –¥—É—É—Å–ª–∞–∞! üéâ";
    optionsDiv.innerHTML = "";
    feedbackEl.innerText = `–¢–∞–Ω—ã –æ–Ω–æ–æ: ${score}`;
    return;
  }

  optionsDiv.innerHTML = "";
  attempts = 0;
  feedbackEl.innerText = "";

  let index;
  do {
    index = Math.floor(Math.random() * words.length);
  } while (usedIndexes.has(index));
  usedIndexes.add(index);

  currentQuestion = words[index];
  const isJapaneseToMongolian = lang === "jp";
  currentQuestion.question = isJapaneseToMongolian ? currentQuestion.kana : currentQuestion.mongolian;
  currentQuestion.answer = isJapaneseToMongolian ? currentQuestion.mongolian : currentQuestion.kana;
  currentQuestion.options = getNeighborChoices(index, currentQuestion.answer, isJapaneseToMongolian);

  questionText.innerText = currentQuestion.question;
  showChoices(currentQuestion.options);
  startVisualTimer();
}

function showChoices(options) {
  optionsDiv.innerHTML = "";
  options.forEach((choice, i) => {
    const btn = document.createElement("button");
    btn.textContent = choice;
    btn.onclick = () => checkAnswer(i);
    optionsDiv.appendChild(btn);
  });
}

function checkAnswer(selected) {
  const correct = currentQuestion.options[selected] === currentQuestion.answer;
  clearTimeout(timerTimeout);
  progressBar.style.animation = "none";

  if (correct) {
    score++;
    scoreDisplay.innerText = `–û–Ω–æ–æ: ${score}`;
    feedbackEl.innerText = "‚úÖ –ó”©–≤!";
    setTimeout(newQuestion, 1000);
  } else {
    attempts++;
    feedbackEl.innerText = `‚ùå –ë—É—Ä—É—É! (${attempts}/${maxAttempts} –æ—Ä–æ–ª–¥–ª–æ–≥–æ)`;
    if (attempts >= maxAttempts) {
      showAnswer();
    } else {
      startVisualTimer();
    }
  }
}

function showAnswer() {
  clearTimeout(timerTimeout);
  progressBar.style.animation = "none";
  feedbackEl.innerText = `‚ùå ${attempts >= maxAttempts ? "–û—Ä–æ–ª–¥–ª–æ–≥–æ –¥—É—É—Å–ª–∞–∞" : "–•—É–≥–∞—Ü–∞–∞ –¥—É—É—Å–ª–∞–∞"}! –ó”©–≤ —Ö–∞—Ä–∏—É–ª—Ç: ${currentQuestion.answer}`;
  setTimeout(() => {
    if (confirm("–î–∞—Ö–∏–Ω —ç—Ö–ª—ç—Ö “Ø“Ø?")) {
      score = 0;
      attempts = 0;
      usedIndexes.clear();
      scoreDisplay.innerText = `–û–Ω–æ–æ: ${score}`;
      feedbackEl.innerText = "";
      newQuestion();
    } else {
      questionText.innerText = "–¢–æ–≥–ª–æ–æ–º –¥—É—É—Å—Å–∞–Ω üéå";
      optionsDiv.innerHTML = "";
      feedbackEl.innerText = `–¢–∞–Ω—ã –æ–Ω–æ–æ: ${score}`;
    }
  }, 1000);
}

function shuffle(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}
